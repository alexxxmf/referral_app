'''
    def test_subscriber_already_in_db(self):
        #email is unique in model??
        subscriber1 = Subscriber.objects.create(email='alberto@hotmail.com')
        subscriber1.save()
        subscriber2 = Subscriber.objects.create(email='alberto@hotmail.com')
        self.assertRaises(IntegrityError, subscriber2.save())
        #prompt that email is already in db and should
        #be confirmed

    def test_form_validates_input_is_email(self):
        pass

    def test_form_rendered_properly(self):
        pass
       
    #def test_form_validates_email(self):
     #   form = Form(email='alexismoro@hotmail.com')
        #self.assertEqual()


    def tearDown(self):
        pass


    def test_unique_code_in_db(self):
        #create random unique code, it should redirect because it's not in db
        unique_code = 'abcd1234'
        #create and record user 1 in db
        subscriber1 = Subscriber.objects.create(email='alexismoro@hotmail.com')
        subscriber1.save()
        #request home page passing user1.referral_code as argument


    #is the input provided a valid email format
    def test_input_is_email(self):
    	request = HttpRequest()
    	request.method = 'POST'
    	request.POST['email'] = 'alexmoro@hotmail.com'
    	response = home(request)


    #when we already have that email in our db it should prompt something
    def test_email_already_signed(self):
    	pass

    #if there is a unique code passed via get as variable it should be in DB
    def test_is_there_a_valid_unique_code(self):
    	pass

    #more that three 3 signed ups from the same ip it's suspicious
    def test_no_more_than_three(self):
    	pass

    def test_request_dashboard_without_cookie(self):
    	pass

    
'''